{
	"info": {
		"_postman_id": "your-collection-id",
		"name": "Spring Boot Rate Limiter Test",
		"description": "Collection to test Spring Boot Rate Limiting functionality",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Posts V1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/posts",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["api", "v1", "posts"]
				}
			}
		},
		{
			"name": "Get Posts V2",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v2/posts",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["api", "v2", "posts"]
				}
			}
		},
		{
			"name": "Get Posts (Header Version)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-Version",
						"value": "2",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/api/posts",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["api", "posts"]
				}
			}
		},
		{
			"name": "Rate Limit Test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Store the response headers",
							"var remainingRequests = pm.response.headers.get('X-RateLimit-Remaining');",
							"var resetTime = pm.response.headers.get('X-RateLimit-Reset');",
							"",
							"// Test response code",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Successful request\", function () {",
							"        pm.response.to.have.status(200);",
							"        pm.expect(remainingRequests).to.not.be.null;",
							"        console.log('Remaining requests: ' + remainingRequests);",
							"    });",
							"} else if (pm.response.code === 429) {",
							"    pm.test(\"Rate limit exceeded\", function () {",
							"        pm.response.to.have.status(429);",
							"        console.log('Rate limit exceeded. Reset time: ' + resetTime);",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/posts",
					"protocol": "http",
					"host": ["localhost"],
					"port": "8080",
					"path": ["api", "v1", "posts"]
				}
			}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [""]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [""]
			}
		}
	]
} 